---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Killua Animated Wallpaper">
	<canvas id="canvas" width="1920" height="1080"></canvas>
	<audio id="audio" src="audio.mp3"></audio>
</Layout>

<style>
	#canvas {
		position: fixed;
		z-index: 50;
		width: 100dvw;
		height: 100dvh;
		object-fit: cover;
		object-position: 60% 50%;
	}
</style>

<script>
	const canvas = document.querySelector<HTMLCanvasElement>("#canvas")!;
	const ctx = canvas.getContext("2d")!;

	const imageUrls = [
		"keyframes/blink.png",
		"keyframes/buy_soda_01.png",
		"keyframes/buy_soda_02.png",
		"keyframes/buy_soda_03.png",
		"keyframes/buy_soda_04.png",
		"keyframes/buy_soda_05.png",
		"keyframes/buy_soda_06.png",
		"keyframes/buy_soda_07.png",
		"keyframes/buy_soda_08.png",
		"keyframes/buy_soda_09.png",
		"keyframes/buy_soda_10.png",
		"keyframes/buy_soda_11.png",
		"keyframes/buy_soda_12.png",
		"keyframes/drink_1.png",
		"keyframes/drink_2.png",
		"keyframes/drink_3.png",
		"keyframes/look_down.png",
		"keyframes/look_up_1.png",
		"keyframes/look_up_2.png",
		"keyframes/look_up_3.png",
		"keyframes/look_up_talk_1.png",
		"keyframes/look_up_talk_2.png",
		"keyframes/normal.png",
		"keyframes/stop_drink_1.png",
		"keyframes/stop_drink_2.png",
		"keyframes/stop_drink_3.png",
		"keyframes/stop_drink_4.png",
		"keyframes/stop_drink_5.png",
		"keyframes/stop_drink_6.png",
		"keyframes/stop_drink_7.png",
		"keyframes/stop_drink_8.png",
		"keyframes/talk_1.png",
		"keyframes/talk_2.png",
		"keyframes/throw_soda_01.png",
		"keyframes/throw_soda_02.png",
		"keyframes/throw_soda_03.png",
		"keyframes/throw_soda_04.png",
		"keyframes/throw_soda_05.png",
		"keyframes/throw_soda_06.png",
		"keyframes/throw_soda_07.png",
		"keyframes/throw_soda_08.png",
		"keyframes/throw_soda_09.png",
		"keyframes/throw_soda_10.png",
		"keyframes/throw_soda_11.png",
		"keyframes/throw_soda_12.png"
	];

	let images: {
		[key: string]: HTMLImageElement;
	} = {};
	let currentFrame = 0;
	const fps = 24;
	const frameDuration = 1000 / fps;
	let animationInterval: number | undefined;

	const frames: string[] = [];

	const randomInRange = (n1: number, n2?: number) => {
		if (!n2) return Math.floor(Math.random() * n1);
		else return Math.floor(Math.random() * (n2 - n1) + n1);
	};

	const addFrames = (frames: string[], image: string, frameQuantity: number) => {
		for (let i = 0; i < frameQuantity; ++i) {
			frames.push(image);
		}
	};

	const premadeAnimations = {
		buySoda: (frames: string[]) => {
			addFrames(frames, "buy_soda_01", 3);
			addFrames(frames, "buy_soda_02", 2);
			addFrames(frames, "buy_soda_03", 2);
			addFrames(frames, "buy_soda_04", 2);
			addFrames(frames, "buy_soda_05", 2);
			addFrames(frames, "buy_soda_06", 2);
			addFrames(frames, "buy_soda_07", 2);
			addFrames(frames, "buy_soda_08", 2);
			addFrames(frames, "buy_soda_09", 3);
			addFrames(frames, "buy_soda_10", 3);
			addFrames(frames, "buy_soda_11", 3);
			addFrames(frames, "buy_soda_12", 8);
		},
		throwSoda: (frames: string[]) => {
			addFrames(frames, "throw_soda_01", 3);
			addFrames(frames, "throw_soda_02", 3);
			addFrames(frames, "throw_soda_03", 3);
			addFrames(frames, "throw_soda_04", 3);
			addFrames(frames, "throw_soda_05", 1);
			addFrames(frames, "throw_soda_06", 1);
			addFrames(frames, "throw_soda_07", 1);
			addFrames(frames, "throw_soda_08", 1);
			addFrames(frames, "throw_soda_09", 2);
			addFrames(frames, "throw_soda_10", 2);
			addFrames(frames, "throw_soda_11", 1);
			addFrames(frames, "throw_soda_12", 3);
			addFrames(frames, "throw_soda_01", 9);
		},
		blink: (frames: string[], frameQuantity = 2) => {
			addFrames(frames, "look_down", frameQuantity);
			addFrames(frames, "blink", frameQuantity);
			addFrames(frames, "look_down", frameQuantity);
		},
		doubleBlink: (frames: string[], frameQuantity = 2) => {
			addFrames(frames, "look_down", frameQuantity);
			addFrames(frames, "blink", frameQuantity);
			addFrames(frames, "look_down", frameQuantity);
			addFrames(frames, "normal", frameQuantity * 3);
			addFrames(frames, "look_down", frameQuantity);
			addFrames(frames, "blink", frameQuantity);
			addFrames(frames, "look_down", frameQuantity);
		},
		lookUp: (frames: string[], frameQuantity = 2) => {
			addFrames(frames, "normal", frameQuantity);
			addFrames(frames, "look_up_1", frameQuantity);
			addFrames(frames, "look_up_2", frameQuantity);
			addFrames(frames, "look_up_3", frameQuantity);
		},
		lookDown: (frames: string[], frameQuantity = 2) => {
			addFrames(frames, "look_up_3", frameQuantity);
			addFrames(frames, "look_up_2", frameQuantity);
			addFrames(frames, "look_up_1", frameQuantity);
			addFrames(frames, "normal", frameQuantity);
		},
		startDrink: (frames: string[], frameQuantity = 2) => {
			addFrames(frames, "normal", frameQuantity);
			addFrames(frames, "stop_drink_8", frameQuantity);
			addFrames(frames, "stop_drink_7", frameQuantity);
			addFrames(frames, "stop_drink_6", frameQuantity);
			addFrames(frames, "stop_drink_5", frameQuantity);
			addFrames(frames, "stop_drink_4", frameQuantity);
			addFrames(frames, "stop_drink_3", frameQuantity);
			addFrames(frames, "stop_drink_2", frameQuantity);
			addFrames(frames, "stop_drink_1", frameQuantity);
		},
		stopDrink: (frames: string[], frameQuantity = 2) => {
			addFrames(frames, "stop_drink_1", frameQuantity);
			addFrames(frames, "stop_drink_2", frameQuantity);
			addFrames(frames, "stop_drink_3", frameQuantity);
			addFrames(frames, "stop_drink_4", frameQuantity);
			addFrames(frames, "stop_drink_5", frameQuantity);
			addFrames(frames, "stop_drink_6", frameQuantity);
			addFrames(frames, "stop_drink_7", frameQuantity);
			addFrames(frames, "stop_drink_8", frameQuantity);
			addFrames(frames, "normal", frameQuantity);
		},
		drink: (frames: string[], times = 1, frameQuantity = 2) => {
			for (let i = 0; i < times; ++i) {
				addFrames(frames, "drink_1", frameQuantity);
				addFrames(frames, "drink_2", frameQuantity);
				addFrames(frames, "drink_3", frameQuantity);
				addFrames(frames, "drink_2", frameQuantity);
				addFrames(frames, "drink_1", frameQuantity);
			}
		},
		lookAtCan: (frames: string[], frameQuantity = 2) => {
			addFrames(frames, "normal", frameQuantity);
			addFrames(frames, "stop_drink_8", frameQuantity);
			addFrames(frames, "stop_drink_7", frameQuantity);
			addFrames(frames, "stop_drink_6", frameQuantity * 2);
			addFrames(frames, "stop_drink_5", frameQuantity * 10);
			addFrames(frames, "stop_drink_5", frameQuantity);
			addFrames(frames, "stop_drink_6", frameQuantity);
			addFrames(frames, "stop_drink_7", frameQuantity);
			addFrames(frames, "stop_drink_8", frameQuantity);
		},
		talk: (frames: string[], frameQuantity = 2) => {
			addFrames(frames, "normal", frameQuantity);
			addFrames(frames, "talk_1", frameQuantity * 2);
			addFrames(frames, "talk_2", frameQuantity * 2);
		}
	};

	const generateAnimation = (frames: string[]) => {
		premadeAnimations.buySoda(frames);

		for (let i = 0; i < randomInRange(12, 18); ++i) {
			addFrames(frames, "normal", randomInRange(12, 24 * 2));
			const choice = randomInRange(100);
			if (i % 2 === 0) {
				if (choice < 50) {
					premadeAnimations.doubleBlink(frames);
				} else if (choice >= 50) {
					premadeAnimations.blink(frames);
				}
			} else {
				if (choice < 30) {
					premadeAnimations.lookUp(frames);
					addFrames(frames, "look_up_3", randomInRange(24, 24 * 3));
					premadeAnimations.lookDown(frames);
				} else if (choice >= 30 && choice < 85) {
					premadeAnimations.startDrink(frames);
					premadeAnimations.drink(frames, randomInRange(3, 7));
					premadeAnimations.stopDrink(frames);
				} else if (choice >= 80 && choice < 99) {
					premadeAnimations.lookAtCan(frames);
				} else if (choice >= 99) {
					premadeAnimations.talk(frames);
				}
			}
		}
		addFrames(frames, "normal", randomInRange(12, 24 * 2));

		premadeAnimations.throwSoda(frames);
	};

	function preloadImages(urls: string[], callback: () => void) {
		let loadedImages = 0;
		urls.forEach(url => {
			const img = new Image();
			img.src = url;
			const path = url.split("/");
			const file = path[path.length - 1].split(".");
			const fileName = file[0];
			img.onload = () => {
				images[fileName] = img;
				loadedImages++;
				if (loadedImages === urls.length) {
					callback();
				}
			};
		});
	}

	function startAnimation() {
		if (animationInterval) {
			clearInterval(animationInterval);
		}
		animationInterval = setInterval(() => {
			if (currentFrame === 0) generateAnimation(frames);
			drawFrame(currentFrame);
			currentFrame = (currentFrame + 1) % frames.length;
		}, frameDuration);
	}

	function drawFrame(frame: number) {
		ctx.clearRect(0, 0, canvas.width, canvas.height);
		if (frames[frame] === "talk_1" && frames[frame - 1] !== "talk_1") document.querySelector<HTMLAudioElement>("#audio")?.play();
		ctx.drawImage(images[frames[frame]], 0, 0, canvas.width, canvas.height);
	}

	preloadImages(imageUrls, () => {
		startAnimation();
	});
</script>
